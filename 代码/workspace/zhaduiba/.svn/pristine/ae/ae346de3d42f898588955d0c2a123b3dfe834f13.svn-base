package com.zhadui.front.action;

import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Iterator;

import javax.imageio.ImageIO;
import javax.imageio.ImageReadParam;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;

import org.apache.struts2.ServletActionContext;
import org.springframework.web.multipart.MultipartFile;

import com.opensymphony.xwork2.ActionSupport;



@SuppressWarnings("serial")
public class UploadImageHandler extends ActionSupport {
	// 上传临时文件夹
	private int img_x;
	private int img_y;
	private int img_w;
	private int img_h;
	private File headImageTemp;
    //提交过来的file的名字
    private String headImageTempFileName;   
    //提交过来的file的MIME类型
    private String headImageTempContentType;
	
    
	public void uploadImage() throws IOException{
		// 文件类型验证！！！！！！！！！！！！！！！！！！！！！！！
		ImageInputStream iis =null ;
		InputStream is = null;
		BufferedImage resizeImg = null;
		
		try {
			String root = ServletActionContext.getServletContext().getRealPath("/image_server/temp");
        
	        is = new FileInputStream(headImageTemp);
	        
	        // 图片缩放
	        BufferedImage im = ImageIO.read(is);
	        /* 原始图像的宽度和高度 */  
            int width = im.getWidth();  
            int height = im.getHeight();           
            //压缩计算  
            float resizeTimes = 0.3f;
            /* 调整后的图片的宽度和高度 */  
            int toWidth = (int) (width * resizeTimes);  
            int toHeight = (int) (height * resizeTimes);
            
            /* 新生成结果图片 */  
            resizeImg = new BufferedImage(toWidth, toHeight, BufferedImage.TYPE_INT_RGB);  
  
            resizeImg.getGraphics().drawImage(  
                    im.getScaledInstance(toWidth, toHeight, java.awt.Image.SCALE_SMOOTH),
                    0, 0, null);  
            
            // ImageIO.write();
            
	        // 图片剪裁
	        /*
             * 返回包含所有当前已注册 ImageReader 的 Iterator，这些 ImageReader 
             * 声称能够解码指定格式。 参数：formatName - 包含非正式格式名称 .
             *（例如 "jpeg" 或 "tiff"）等 。 
             */
            Iterator<ImageReader> it = ImageIO.getImageReadersByFormatName("jpg");  
            ImageReader reader = it.next(); 
            //获取图片流 
            iis = ImageIO.createImageInputStream(resizeImg);
               
            /* 
             * <p>iis:读取源.true:只向前搜索 </p>.将它标记为 ‘只向前搜索’。
             * 此设置意味着包含在输入源中的图像将只按顺序读取，可能允许 reader
             *  避免缓存包含与以前已经读取的图像关联的数据的那些输入部分。
             */
            reader.setInput(iis,true) ;
            
            /* 
             * <p>描述如何对流进行解码的类<p>.用于指定如何在输入时从 Java Image I/O 
             * 框架的上下文中的流转换一幅图像或一组图像。用于特定图像格式的插件
             * 将从其 ImageReader 实现的 getDefaultReadParam 方法中返回 
             * ImageReadParam 的实例。  
             */
            ImageReadParam param = reader.getDefaultReadParam(); 
             
            /*
             * 图片裁剪区域。Rectangle 指定了坐标空间中的一个区域，通过 Rectangle 对象
             * 的左上顶点的坐标（x，y）、宽度和高度可以定义这个区域。 
             */ 
            Rectangle rect = new Rectangle(img_x, img_y, img_w, img_h); 
            
              
            //提供一个 BufferedImage，将其用作解码像素数据的目标。 
            param.setSourceRegion(rect); 

            /*
             * 使用所提供的 ImageReadParam 读取通过索引 imageIndex 指定的对象，并将
             * 它作为一个完整的 BufferedImage 返回。
             */
            BufferedImage bi = reader.read(0,param);                
      
            //保存新图片 
            ImageIO.write(bi, "jpg", new File(root, "head2.jpg"));   
	        
/*	        
	        OutputStream os = new FileOutputStream(new File(root, headImageTempFileName));
	        
	        System.out.println("fileFileName: " + root + headImageTempFileName);

	        // 因为file是存放在临时文件夹的文件，我们可以将其文件名和文件路径打印出来，看和之前的fileFileName是否相同
	        System.out.println("file: " + headImageTemp.getName());
	        System.out.println("file: " + headImageTemp.getPath());
	        
	        byte[] buffer = new byte[8192];
	        int length = 0;
	        
	        while(-1 != (length = is.read(buffer, 0, buffer.length)))
	        {
	            os.write(buffer);
	        }
	        
	        os.close();
	        is.close();
	        */
		}
		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			if(is!=null)
               is.close() ;       
            if(iis!=null)
               iis.close();  
		}
	}

	public int getImg_x() {
		return img_x;
	}

	public void setImg_x(int img_x) {
		this.img_x = img_x;
	}

	public int getImg_y() {
		return img_y;
	}

	public void setImg_y(int img_y) {
		this.img_y = img_y;
	}

	public int getImg_w() {
		return img_w;
	}

	public void setImg_w(int img_w) {
		this.img_w = img_w;
	}

	public int getImg_h() {
		return img_h;
	}

	public void setImg_h(int img_h) {
		this.img_h = img_h;
	}
	public File getHeadImageTemp() {
		return headImageTemp;
	}

	public void setHeadImageTemp(File headImageTemp) {
		this.headImageTemp = headImageTemp;
	}

	public String getHeadImageTempFileName() {
		return headImageTempFileName;
	}

	public void setHeadImageTempFileName(String headImageTempFileName) {
		this.headImageTempFileName = headImageTempFileName;
	}

	public String getHeadImageTempContentType() {
		return headImageTempContentType;
	}

	public void setHeadImageTempContentType(String headImageTempContentType) {
		this.headImageTempContentType = headImageTempContentType;
	}

}
